diff --git a/libusb/core.c b/libusb/core.c
index 99aab7b..4666a0c 100644
--- a/libusb/core.c
+++ b/libusb/core.c
@@ -2352,21 +2352,32 @@ static void usbi_log_str(struct libusb_context *ctx,
 	UNUSED(level);
 }
 
+static libusb_log_function usbi_log_function = NULL;
+
+void API_EXPORTED libusb_set_log_function(libusb_log_function function) {
+	usbi_log_function = function;
+}
+
 void usbi_log_v(struct libusb_context *ctx, enum libusb_log_level level,
 	const char *function, const char *format, va_list args)
 {
+	int ctx_level = 0;
 	const char *prefix = "";
 	char buf[USBI_MAX_LOG_LEN];
 	struct timeval now;
 	int global_debug, header_len, text_len;
 	static int has_debug_header_been_displayed = 0;
 
+	if (usbi_log_function != NULL) {
+		usbi_log_function(ctx, level, function, format, args);
+		return;
+	}
+
 #ifdef ENABLE_DEBUG_LOGGING
 	global_debug = 1;
 	UNUSED(ctx);
+	UNUSED(ctx_level);
 #else
-	int ctx_level = 0;
-
 	USBI_GET_CONTEXT(ctx);
 	if (ctx) {
 		ctx_level = ctx->debug;
diff --git a/libusb/io.c b/libusb/io.c
index 0026ba7..89fca8b 100644
--- a/libusb/io.c
+++ b/libusb/io.c
@@ -2722,7 +2722,6 @@ DEFAULT_VISIBILITY
 const struct libusb_pollfd ** LIBUSB_CALL libusb_get_pollfds(
 	libusb_context *ctx)
 {
-#ifndef OS_WINDOWS
 	struct libusb_pollfd **ret = NULL;
 	struct usbi_pollfd *ipollfd;
 	size_t i = 0;
@@ -2741,11 +2740,6 @@ const struct libusb_pollfd ** LIBUSB_CALL libusb_get_pollfds(
 out:
 	usbi_mutex_unlock(&ctx->event_data_lock);
 	return (const struct libusb_pollfd **) ret;
-#else
-	usbi_err(ctx, "external polling of libusb's internal descriptors "\
-		"is not yet supported on Windows platforms");
-	return NULL;
-#endif
 }
 
 /** \ingroup libusb_poll
diff --git a/libusb/libusb-1.0.def b/libusb/libusb-1.0.def
index 2443d9b..617aa01 100644
--- a/libusb/libusb-1.0.def
+++ b/libusb/libusb-1.0.def
@@ -172,3 +172,15 @@ EXPORTS
   libusb_unref_device@4 = libusb_unref_device
   libusb_wait_for_event
   libusb_wait_for_event@8 = libusb_wait_for_event
+  usbi_pipe
+  usbi_pipe@4 = usbi_pipe
+  usbi_poll
+  usbi_poll@12 = usbi_poll
+  usbi_write
+  usbi_write@12 = usbi_write
+  usbi_read
+  usbi_read@12 = usbi_read
+  usbi_close
+  usbi_close@4 = usbi_close
+  libusb_set_log_function
+  libusb_set_log_function@4 = libusb_set_log_function
diff --git a/libusb/libusb-1.0.rc b/libusb/libusb-1.0.rc
index 3dce6d5..6eeff3e 100644
--- a/libusb/libusb-1.0.rc
+++ b/libusb/libusb-1.0.rc
@@ -49,7 +49,7 @@ BEGIN
 			VALUE "LegalTrademarks", "http://www.gnu.org/licenses/lgpl-2.1.html\0"
 			VALUE "OriginalFilename", "libusb-1.0.dll\0"
 			VALUE "PrivateBuild", "\0"
-			VALUE "ProductName", "libusb-1.0\0"
+			VALUE "ProductName", "libusb-1.0-b14d0a49e8014c0043673160ace2910e5742a1d2-tf-17\0"
 			VALUE "ProductVersion", LIBUSB_VERSIONSTRING
 			VALUE "SpecialBuild", "\0"
 		END
diff --git a/libusb/libusb.h b/libusb/libusb.h
index f73e31c..2d79d8d 100644
--- a/libusb/libusb.h
+++ b/libusb/libusb.h
@@ -60,6 +60,7 @@ typedef unsigned __int32  uint32_t;
 
 #include <time.h>
 #include <limits.h>
+#include <stdarg.h>
 
 /* 'interface' might be defined as a macro on Windows, so we need to
  * undefine it so as not to break the current libusb API, because
@@ -67,6 +68,7 @@ typedef unsigned __int32  uint32_t;
  * As this can be problematic if you include windows.h after libusb.h
  * in your sources, we force windows.h to be included first. */
 #if defined(_WIN32) || defined(__CYGWIN__) || defined(_WIN32_WCE)
+#include <winsock2.h> // for struct timeval
 #include <windows.h>
 #if defined(interface)
 #undef interface
@@ -2001,6 +2003,13 @@ int LIBUSB_CALL libusb_hotplug_register_callback(libusb_context *ctx,
 void LIBUSB_CALL libusb_hotplug_deregister_callback(libusb_context *ctx,
 						libusb_hotplug_callback_handle callback_handle);
 
+typedef void (LIBUSB_CALL *libusb_log_function)(libusb_context *ctx,
+                                                enum libusb_log_level level,
+                                                const char *function,
+                                                const char *format,
+                                                va_list args);
+void LIBUSB_CALL libusb_set_log_function(libusb_log_function function);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/libusb/os/poll_windows.c b/libusb/os/poll_windows.c
index 9825607..934feb2 100644
--- a/libusb/os/poll_windows.c
+++ b/libusb/os/poll_windows.c
@@ -258,7 +258,7 @@ void exit_polling(void)
  * event. To that extent, we create a single wfd and overlapped as a means
  * to access that event.
  */
-int usbi_pipe(int filedes[2])
+int API_EXPORTED usbi_pipe(int filedes[2])
 {
 	int i;
 	OVERLAPPED* overlapped;
@@ -501,19 +501,49 @@ struct winfd overlapped_to_winfd(OVERLAPPED* overlapped)
 	return INVALID_WINFD;
 }
 
+typedef struct {
+	CRITICAL_SECTION mutex;
+	int object_index;
+	HANDLE event;
+} usbi_wait_object_ctx;
+
+typedef struct {
+	usbi_wait_object_ctx *ctx;
+	int object_index;
+	HANDLE wait_object;
+} usbi_wait_object_wrapper;
+
+static void CALLBACK usbi_poll_callback(void *context, BOOLEAN timeout)
+{
+	usbi_wait_object_wrapper *wrapper = (usbi_wait_object_wrapper *)context;
+
+	if (!timeout) {
+		EnterCriticalSection(&wrapper->ctx->mutex);
+
+		if (wrapper->ctx->object_index < 0) {
+			wrapper->ctx->object_index = wrapper->object_index;
+
+			SetEvent(wrapper->ctx->event);
+		}
+
+		LeaveCriticalSection(&wrapper->ctx->mutex);
+	}
+}
+
 /*
  * POSIX poll equivalent, using Windows OVERLAPPED
  * Currently, this function only accepts one of POLLIN or POLLOUT per fd
  * (but you can create multiple fds from the same handle for read and write)
  */
-int usbi_poll(struct pollfd *fds, unsigned int nfds, int timeout)
+int API_EXPORTED usbi_poll(struct pollfd *fds, unsigned int nfds, int timeout)
 {
-	unsigned i;
-	int _index, object_index, triggered;
+	int i, _index, object_index, triggered;
 	HANDLE *handles_to_wait_on;
 	int *handle_to_index;
 	DWORD nb_handles_to_wait_on = 0;
 	DWORD ret;
+	usbi_wait_object_ctx wait_object_ctx;
+	usbi_wait_object_wrapper *wrappers;
 
 	CHECK_INIT_POLLING;
 
@@ -526,7 +556,7 @@ int usbi_poll(struct pollfd *fds, unsigned int nfds, int timeout)
 		goto poll_exit;
 	}
 
-	for (i = 0; i < nfds; ++i) {
+	for (i = 0; i < (int)nfds; ++i) {
 		fds[i].revents = 0;
 
 		// Only one of POLLIN or POLLOUT can be selected with this version of poll (not both)
@@ -594,9 +624,97 @@ int usbi_poll(struct pollfd *fds, unsigned int nfds, int timeout)
 		} else {
 			poll_dbg("starting %d ms wait for %u handles...", timeout, (unsigned int)nb_handles_to_wait_on);
 		}
-		ret = WaitForMultipleObjects(nb_handles_to_wait_on, handles_to_wait_on,
-			FALSE, (timeout<0)?INFINITE:(DWORD)timeout);
-		object_index = ret-WAIT_OBJECT_0;
+
+		if (nb_handles_to_wait_on <= MAXIMUM_WAIT_OBJECTS) {
+			ret = WaitForMultipleObjects(nb_handles_to_wait_on, handles_to_wait_on,
+			                             FALSE, (timeout<0)?INFINITE:(DWORD)timeout);
+			object_index = ret-WAIT_OBJECT_0;
+		} else {
+			poll_dbg("more than %d handles to wait for", MAXIMUM_WAIT_OBJECTS);
+
+			wrappers = (usbi_wait_object_wrapper *)calloc(nfds, sizeof(usbi_wait_object_wrapper));
+
+			if (wrappers == NULL) {
+				errno = ENOMEM;
+				triggered = -1; // error
+				goto poll_exit;
+			}
+
+			InitializeCriticalSection(&wait_object_ctx.mutex);
+
+			wait_object_ctx.object_index = -1;
+			wait_object_ctx.event = CreateEvent(NULL, TRUE, FALSE, NULL);
+
+			if (wait_object_ctx.event == NULL) {
+				poll_dbg(" error creating wait object event: %d", GetLastError());
+
+				free(wrappers);
+				DeleteCriticalSection(&wait_object_ctx.mutex);
+
+				errno = EIO;
+				triggered = -1; // error
+				goto poll_exit;
+			}
+
+			for (i = 0; i < (int)nb_handles_to_wait_on; ++i) {
+				wrappers[i].ctx = &wait_object_ctx;
+				wrappers[i].object_index = i;
+
+				// FIXME: this can behave differently if objects such as semaphores or
+				//        auto-reset events are used. those objects are altered by a
+				//        WaitForMultipleObjects call. but WaitForMultipleObjects will
+				//        return after the first signaled object. but the thread pool
+				//        behind RegisterWaitForSingleObject can wait for all signaled
+				//        objects making them non-signaled if the object is a semaphore
+				//        or an auto-reset event. currently this is not a problem
+				//        because currently no semaphores or auto-reset events are
+				//        used with usbi_poll.
+				if (!RegisterWaitForSingleObject(&wrappers[i].wait_object, handles_to_wait_on[i],
+				                                 usbi_poll_callback, &wrappers[i], INFINITE,
+				                                 WT_EXECUTEONLYONCE)) {
+					poll_dbg(" error registering wait object %d: %d", i, GetLastError());
+
+					for (--i; i >= 0; --i) {
+						if (!UnregisterWaitEx(wrappers[i].wait_object, INVALID_HANDLE_VALUE) &&
+						    GetLastError() != ERROR_IO_PENDING) {
+							poll_dbg(" error unregistering wait object %d: %d", i, GetLastError());
+						}
+					}
+
+					free(wrappers);
+					DeleteCriticalSection(&wait_object_ctx.mutex);
+					CloseHandle(wait_object_ctx.event);
+
+					errno = EIO;
+					triggered = -1; // error
+					goto poll_exit;
+				}
+			}
+
+			ret = WaitForSingleObject(wait_object_ctx.event, (timeout<0)?INFINITE:(DWORD)timeout);
+
+			if (ret == WAIT_OBJECT_0) {
+				EnterCriticalSection(&wait_object_ctx.mutex);
+
+				object_index = wait_object_ctx.object_index;
+
+				LeaveCriticalSection(&wait_object_ctx.mutex);
+			} else {
+				object_index = -1;
+			}
+
+			for (i = 0; i < (int)nb_handles_to_wait_on; ++i) {
+				if (!UnregisterWaitEx(wrappers[i].wait_object, INVALID_HANDLE_VALUE) &&
+				    GetLastError() != ERROR_IO_PENDING) {
+					poll_dbg(" error unregistering wait object %d: %d", i, GetLastError());
+				}
+			}
+
+			free(wrappers);
+			DeleteCriticalSection(&wait_object_ctx.mutex);
+			CloseHandle(wait_object_ctx.event);
+		}
+
 		if ((object_index >= 0) && ((DWORD)object_index < nb_handles_to_wait_on)) {
 			poll_dbg("  completed after wait");
 			i = handle_to_index[object_index];
@@ -622,13 +740,14 @@ poll_exit:
 	if (handle_to_index != NULL) {
 		free(handle_to_index);
 	}
+
 	return triggered;
 }
 
 /*
  * close a fake pipe fd
  */
-int usbi_close(int fd)
+int API_EXPORTED usbi_close(int fd)
 {
 	int _index;
 	int r = -1;
@@ -650,7 +769,7 @@ int usbi_close(int fd)
 /*
  * synchronous write for fake "pipe" signaling
  */
-ssize_t usbi_write(int fd, const void *buf, size_t count)
+ssize_t API_EXPORTED usbi_write(int fd, const void *buf, size_t count)
 {
 	int _index;
 	UNUSED(buf);
@@ -686,7 +805,7 @@ ssize_t usbi_write(int fd, const void *buf, size_t count)
 /*
  * synchronous read for fake "pipe" signaling
  */
-ssize_t usbi_read(int fd, void *buf, size_t count)
+ssize_t API_EXPORTED usbi_read(int fd, void *buf, size_t count)
 {
 	int _index;
 	ssize_t r = -1;
diff --git a/libusb/os/poll_windows.h b/libusb/os/poll_windows.h
index aa4c985..1feb511 100644
--- a/libusb/os/poll_windows.h
+++ b/libusb/os/poll_windows.h
@@ -55,7 +55,7 @@ enum windows_version {
 };
 extern int windows_version;
 
-#define MAX_FDS     256
+#define MAX_FDS     4096
 
 #define POLLIN      0x0001    /* There is data to read */
 #define POLLPRI     0x0002    /* There is urgent data to read */
@@ -90,11 +90,11 @@ struct winfd {
 };
 extern const struct winfd INVALID_WINFD;
 
-int usbi_pipe(int pipefd[2]);
-int usbi_poll(struct pollfd *fds, unsigned int nfds, int timeout);
-ssize_t usbi_write(int fd, const void *buf, size_t count);
-ssize_t usbi_read(int fd, void *buf, size_t count);
-int usbi_close(int fd);
+int LIBUSB_CALL usbi_pipe(int pipefd[2]);
+int LIBUSB_CALL usbi_poll(struct pollfd *fds, unsigned int nfds, int timeout);
+ssize_t LIBUSB_CALL usbi_write(int fd, const void *buf, size_t count);
+ssize_t LIBUSB_CALL usbi_read(int fd, void *buf, size_t count);
+int LIBUSB_CALL usbi_close(int fd);
 
 void init_polling(void);
 void exit_polling(void);
diff --git a/libusb/os/windows_nt_common.c b/libusb/os/windows_nt_common.c
index 68eb4a7..7697213 100644
--- a/libusb/os/windows_nt_common.c
+++ b/libusb/os/windows_nt_common.c
@@ -505,6 +505,10 @@ static void windows_transfer_callback(struct usbi_transfer *itransfer, uint32_t
 		usbi_dbg("detected operation aborted");
 		status = LIBUSB_TRANSFER_CANCELLED;
 		break;
+	case ERROR_FILE_NOT_FOUND:
+		usbi_dbg("detected disconnect");
+		status = LIBUSB_TRANSFER_NO_DEVICE;
+		break;
 	default:
 		usbi_err(ITRANSFER_CTX(itransfer), "detected I/O error %u: %s", io_result, windows_error_str(io_result));
 		status = LIBUSB_TRANSFER_ERROR;
@@ -578,8 +582,8 @@ int windows_handle_events(struct libusb_context *ctx, struct pollfd *fds, POLL_N
 			windows_handle_callback(transfer, io_result, io_size);
 		} else {
 			usbi_err(ctx, "could not find a matching transfer for fd %d", fds[i]);
-			r = LIBUSB_ERROR_NOT_FOUND;
-			break;
+			//r = LIBUSB_ERROR_NOT_FOUND;
+			//break;
 		}
 	}
 	usbi_mutex_unlock(&ctx->open_devs_lock);
diff --git a/libusb/os/windows_winusb.c b/libusb/os/windows_winusb.c
index d1d2749..a7a4dc0 100644
--- a/libusb/os/windows_winusb.c
+++ b/libusb/os/windows_winusb.c
@@ -1000,6 +1000,14 @@ static int init_device(struct libusb_device *dev, struct libusb_device *parent_d
 	unsigned long tmp_id;
 	unsigned i;
 
+	if (strncmp(device_id, "\\\\.\\USB#VID_16D0&PID_09E5&MI_01", 31) == 0 && port_number > 1) {
+		// the second function (MI_01) of the RED Brick seems to be reported on
+		// the wrong port number, try to fix this
+		usbi_dbg("trying to fix port number %u for %s", port_number, device_id);
+
+		--port_number;
+	}
+
 	if ((dev == NULL) || (parent_dev == NULL))
 		return LIBUSB_ERROR_NOT_FOUND;
 
@@ -1051,6 +1059,11 @@ static int init_device(struct libusb_device *dev, struct libusb_device *parent_d
 
 	memset(&conn_info, 0, sizeof(conn_info));
 	if (priv->depth != 0) { // Not a HCD hub
+		if (port_number == 0) {
+			usbi_warn(ctx, "got invalid port number for '%s', if this device is connected to a Renesas/NEC USB controller update the driver", device_id);
+			return LIBUSB_ERROR_NO_DEVICE;
+		}
+
 		handle = CreateFileA(parent_priv->path, GENERIC_WRITE, FILE_SHARE_WRITE, NULL, OPEN_EXISTING,
 			FILE_FLAG_OVERLAPPED, NULL);
 		if (handle == INVALID_HANDLE_VALUE) {
@@ -1130,6 +1143,15 @@ static int init_device(struct libusb_device *dev, struct libusb_device *parent_d
 	usbi_dbg("(bus: %u, addr: %u, depth: %u, port: %u): '%s'",
 		dev->bus_number, dev->device_address, priv->depth, priv->port, device_id);
 
+	if (strncmp(device_id, "\\\\.\\USB#VID_16D0&PID_09E5&MI_", 29) == 0) {
+		// don't add interfaces of the composite RED Brick devices to the
+		// device list. this will just result in the device list containing
+		// the device multiple times, which will confuse brickd
+		usbi_dbg("hiding composite device function from devices list: %s", device_id);
+
+		return LIBUSB_ERROR_NO_DEVICE;
+	}
+
 	return LIBUSB_SUCCESS;
 }
 
@@ -1330,7 +1352,7 @@ static int windows_get_device_list(struct libusb_context *ctx, struct discovered
 		return LIBUSB_ERROR_NO_MEM;
 
 	for (pass = 0; ((pass < nb_guids) && (r == LIBUSB_SUCCESS)); pass++) {
-//#define ENUM_DEBUG
+#define ENUM_DEBUG
 #if defined(ENABLE_LOGGING) && defined(ENUM_DEBUG)
 		const char *passname[] = { "HCD", "HUB", "GEN", "DEV", "HID", "EXT" };
 		usbi_dbg("#### PROCESSING %ss %s", passname[(pass <= HID_PASS) ? pass : (HID_PASS + 1)],
